== KDE Git Hooks

Jobs (in order):

( Initialisation )
+ Check if repository or server is in maintenance mode
+ Generate + Store a repository identifier, for use by commits.ko
+ Generate a repository checkout information file for gitweb.ko

( Auditing )
+ Ensure they aren't trying to tamper with a protected ref (backups mainly)
+ Verify all pushed commits use the correct unix line endings
+ Ensure only valid filenames have been committed to
+ Check to see if their email address is valid

( Pre Acceptance )
+ Backup refs if they are being deleted/force pushed

( Post Acceptance )
+ Output a url for the commit to be viewed at
+ Notify CIA
+ Send emails
+ Close Reviewboard review requests (if any)

Needed tasks to accomplish the jobs:

+ Read arguments + environment
+ Determine where the configuration repo is located
+ Check for the existance of .gitolite.down
   + In $HOME -> server is in maintenance mode
   + In $GITDIR -> repository is in maintenance mode

+ Getting repo identifier:
   + Check for $GITDIR/kde-repo-nick, and use it's contents as the identifier if it exists
   + Write a 8 character limited, sha1sum of the current working directory path to $GITDIR/kde-repo-uid

+ Generate repository checkout information file:
   + Strip the base repository path off $GITDIR
   + Fill it into a template, and write to $GITDIR/cloneurl

+ Gather extra information for usage in the audit:
   + The type of ref being changed (branch/tag/etc) and the type of change (create/delete/update/forced update)
   + List of commits being pushed if type of change is create/update/forced update

+ Check to ensure a backup ref is not being tampered with
+ Ensure the name of the ref being created is not named "HEAD"
+ Iterate over the list of commits (which will be empty if the operation is a deletion)
   + Extract metadata of the commit (author name + email, list of changed files)
   + Check EOL style
   + Use extracted data to verify author + files changed

+ Assume at this point the refs will be accepted, so make a backup if it is a deletion or force push operation 
   + Backups to be made to refs/backups/<reftype>-<refname>-<timestamp> (eg: refs/backups/branch-master-1212121212 )
   - Garbage clean up script run by cronjob will delete backups after 30 days

+ Fill in a template and output the url for the last commit made

- Check if we created/deleted a ref, and send special email notices about it
+ Iterate over the list of new commits
    + Extract commit metadata (author name + email, commit message, diffstat, file changed list, less than 200 line diff if available)
    + Send notification to CIA, using author details + commit message + file changed list
    + Look for bugzilla hooks, and send it the author details + commit message
    + Send single email, including to CCMAIL recipients, with author details + commit message, using diff or diffstat if diff is too big

Design:
- Wrapper to run git and read entire output into memory
    - Helps for commit message, author details, diff stat, file changed listing, ref type extraction
    - Allows for advanced error handling logic
- Isolatable tasks run as own subroutines
    - Audits
    - Email/Bugzilla/CIA
    - Repo identifier/clone info generation
    - Any task which is in general more than 5 lines of logic....

Reviewboard hook design:
- Depends on python-rest-client
- Uses Reviewboard's REST API
- Not meant to be used directly, but forked from the main hook process
  - This will ensure the hook closes and doesn't hang in case of delayed responses
- Needs a specific user in Reviewboard
  - Permissions required:
    - Can add reviews (the "comments" in Reviewboards are actually reviews)
    - Can change status of a review request
  - Username and password are read from a file on local storage (one line with username:password)
- Hook operation
  - Accesses the Review API for a specific request (board_url/api/review-requests/$REQUEST_ID/reviews)
  - Adds via HTTP POST a comment saying that the review has been submitted with commit $COMMIT, by user $USER
  - Changes, via HTTP PUT (url board_url/api/review-requests/$REQUEST_ID) the status of the review request
    (by setting "status=submitted" in the PUT request body)
  - Information, failures and errors are notified to the user via Python's logging module
    - By default, only information, errors or critical failures are shown, Debug
      output can be enabled by setting DEFAULT_DLEVEL to logging.DEBUG instead
      of logging.INFO
  - In case of changes to RB's URL, it is sufficient to change the
    REVIEWBOARD_URL constant
- Caveats
  - The "proper" way to use Reviewboard's API involves a first GET request to get
    the "links" attribute - this indicates where the links for specific
    operations (submit, comment, etc) are done
  - To save processing time and avoid needless parsing, this part is omitted
    in the hook, using the direct REST URLs for each operation
    - In case the Reviewboard API changes, these URLs will need to be adapted as well
