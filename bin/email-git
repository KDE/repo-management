#!/usr/bin/ruby -w
#
# This file is part of the KDE project
# Copyright (c) 2009-2010 ko gmbh (jean.nicolas.artaud@kogmbh.com)
# Copyright (c) 2009-2010 Ian Monroe (ian@monroe.nu)
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this library; see the file COPYING.LIB.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.
#
############################################################################

#============================= Requirements ============================#

require 'resolv'

BRANCH = ARGV[0]
COMMIT_ID = ARGV[1]
PROJECT = ARGV[2]
SVN_LOCATION = ARGV[3]


#============================== Functions ==============================#
def send_email(from, to, subject, message)
    msg = "From: #{from}
To: <#{to}>
Subject: [#{PROJECT}] #{subject}

#{message}"

    mailIo = IO.popen("/usr/sbin/sendmail #{to}", 'w')
    mailIo.write(msg)
    mailIo.close_write
end


# Send a simple mail (CC)
# email_addresses is an array of addresses
def send_mail(email_addresses,commit_id,message)

    from = `git log #{commit_id} -n 1 --pretty='format:%an <%ae>'`
    subject = `git log #{commit_id} -n 1 --pretty='format:%h'` + ' ' + `git log #{commit_id} -n1 --pretty='format:%s'`[0,50]


    # One mail send for each CCMAIL
    for to in email_addresses
        send_email(from , to, subject, message)
    end
end

def validate_email_domain(email)
    domain = email.match(/\@(.+)/)[1]
    Resolv::DNS.open do |dns|
        @mx = dns.getresources(domain, Resolv::DNS::Resource::IN::MX)
    end
    @mx.size > 0 ? true : false
end

# Send a mail to the kde commits
def kde_commits(commit_id,message)
    warning = ''
    emailAddy = `git log #{commit_id} -n 1 --pretty='format:%ae'`
    if not validate_email_domain(emailAddy) then
        warning = "[BAD EMAIL] "
    end
    from = `git log #{commit_id} -n 1 --pretty='format:%an <%ae>'`
    subject = `git log #{commit_id} -n 1 --pretty='format:%h'` + ': ' + `git log #{commit_id} -n1 --pretty='format:%s'`[0,50]
    subject = "#{warning}#{subject}"
    send_email(from, "kde-commits@kde.org", "#{subject}\nX-Commit-Directories: (0) #{SVN_LOCATION}", "#{message}")
end

# The license checker of a file
def license_checker(code)


    code = code.gsub("/*", "#")
    code = code.gsub("*", "#")
    code = code.gsub(" #", "#")
    code = code.gsub("# ", "#")

    textLines = code.split("\n")
    code = ""
    textLines.each do |line|
        if (line =~ /#\w+/)
            code << line << " "
        end
    end

    code = code.tr("#", "")

    gl = ""
    qte = ""
    license = ""
    lic_problem = 0
    wrong = ""

    if (code =~ /version 2(?:\.0)? .(0-40)as published by the Free Software Foundation/) then
        gl = " (v2)"
    end
    if (code =~ /version 2(?:\.0)? of the License/) then
        gl = " (v2)"
    end
    if (code =~ /version 3(?:\.0)? .{0,40}as published by the Free Software Foundation/) then
        gl = " (v3)"
    end
    if (code =~ /either version 2(?: of the License)? or at your option any later version/) then
        gl = " (v2+)"
    end
    if (code =~ /version 2(?: of the License)? or at your option version 3/) then
        gl = " (v2/3)"
    end
    if (code =~ /version 2(?: of the License)? or at your option version 3 or at the discretion of KDE e.V.{10,60}any later version/) then
        gl = " (v2/3+eV)"
    end

    if (code =~ /either version 3(?: of the License)? or at your option any later version/) then
        gl = " (v3+)"
    end
    if (code =~ /version 2\.1 as published by the Free Software Foundation/) then
        gl = " (v2.1)"
    end
    if (code =~ /2\.1 available at: http:\/\/www.fsf.org\/copyleft\/lesser.html/) then
        gl = " (v2.1)"
    end
    if (code =~ /either version 2\.1 of the License or at your option any later version/) then
        gl = " (v2.1+)"
    end
    if (code =~ /([Pp]ermission is given|[pP]ermission is also granted|[pP]ermission) to link (the code of )?this program with (any edition of )?(Qt|the Qt library)/) then
        qte = " (+Qt exception)"
    end

    # Check for an old FSF address
    # MIT licenses will trigger the check too, as "675 Mass Ave" is MIT's address
    if (code =~ /(?:675 Mass Ave|59 Temple Place|Suite 330|51 Franklin Steet|02139|02111-1307)/)
        # "51 Franklin Street, Fifth Floor, Boston, MA 02110-1301" is the right FSF address
        wrong = " (wrong address)";
        lic_problem = 1;
    end

    # LGPL or GPL
    if (code =~ /under (the (terms|conditions) of )?the GNU (Library|Lesser) General Public License/) then
        license = "LGPL#{gl}#{wrong} #{license}"
    end
    if (code =~ /under (the (terms|conditions) of )?the (Library|Lesser) GNU General Public License/) then
        license = "LGPL#{gl}#{wrong} #{license}"
    end
    if (code =~ /under (the (terms|conditions) of )?the (GNU )?LGPL/) then
        license = "LGPL#{gl}#{wrong} #{license}"
    end
    if (code =~ /[Tt]he LGPL as published by the Free Software Foundation/) then
        license="LGPL#{gl}#{wrong} #{license}"
    end
    if (code =~ /LGPL with the following explicit clarification/) then
        license="LGPL#{gl}#{wrong} #{license}"
    end
    if (code =~ /under (the terms of )?(version 2 of )?the GNU (General Public License|GENERAL PUBLIC LICENSE)/) then
        license = "GPL#{gl}#{qte}#{wrong} #{license}"
    end

    # QPL
    if (code =~ /may be distributed under the terms of the Q Public License as defined by Trolltech AS/) then
        license = "QPL #{license}"
    end

    # X11, BSD-like
    if (code =~ /Permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files/) then
        license = "X11 (BSD like) #{license}"
    end

    # MIT license
    if (code =~ /Permission to use copy modify (and )?distribute(and sell)? this software and its documentation for any purpose/) then
        license = "MIT #{license}"
    end

    # BSD
    if (code =~ /MERCHANTABILITY( AND|| or) FITNESS FOR A PARTICULAR PURPOSE/) and (license !~ /GPL/) then
        license="BSD #{license}"
    end

    # MPL
    if (code =~ /subject to the Mozilla Public License Version 1.1/) then
        license = "MPL 1.1 #{license}"
    end
    if (code =~ /Mozilla Public License Version 1\.0/) then
        license="MPL 1.0 #{license}"
    end
    # Artistic license
    if (code =~ /under the Artistic License/) then
        license = "Artistic $#{license}"
    end

    # Public domain
    if (code =~ /Public Domain/) then
        license = "Public Domain #{license}"
    end
    if (code =~ / disclaims [Cc]opyright/) then
        license = "Public Domain #{license}"
    end

    # Auto-generated
    if (code =~ /(All changes made in this file will be lost|This file is automatically generated|DO NOT EDIT|DO NOT delete this file|[Gg]enerated by|uicgenerated|produced by gperf)/)
        license = "GENERATED FILE"
        lic_problem = 1
    end

    # Don't bother with trivial files.
    if ( license.length() == 0 && code.length() < 128 )
        license = "Trivial file."
    end

    if ( license.length() == 0 )
        #About every license has this clause; but we've failed to detect which type it is.
        if (code =~ /This (software|package)( is free software and)? is provided /)
            license = "Unknown license"
            lic_problem = 1
        end
    end

    license = license.tr(" ", "")

    # Either a missing or an unsupported license
    if (license.length() == 0)
        license = "UNKNOWN"
        lic_problem = 1
    end
    if (license.length() > 0)
        return " [License: #{license}]"
    end
    return "";
end

# Open the file and check the license
def findfile(mess, rev)
    # The lineList save the lines to know later if this is an added file
    lineList = []
    # Initialize the lineList (3 lines needed)
    lineList << 0 << 0 << 0
    # Analyse the lines
    commitlines = mess.split("\n")
    commitlines.each do |line|
        # If a new file ahad been added
        if line == "--- /dev/null" then
            # Take the reminded file added 4 times before
            files = lineList[0].split(/\s/)
            fileB = ""
            files.each do |part|
                fileB = part
            end

            file = ""
            (1..fileB.length()-2).each do |i|
                file << fileB[i+1]
            end

            code = `git show #{rev}:#{file}`

            mess = "\n\tA\t #{file}\t#{license_checker(code)}\n\n#{mess}"
        end
        # Save the current line, in case of a '--- /dev/null' 4 lines later
        lineList[0] = lineList[1]
        lineList[1] = lineList[2]
        lineList[2] = line

    end
    return mess
end

def addbranch(mess)
    return mess.sub(/\A(commit\s[a-z0-9]+\n)(.*)/m, "\\1branch #{BRANCH}\n\\2")
end

# Analyse the commit message in general each line
# Find diff, ccmail, bugs, etc...
def analyze(rev)
    commitlines = `git log -n1 --encoding=UTF-8 --format=format:%B #{rev}`.split("\n")
    commitmessage = addbranch(findfile(`git show --encoding=UTF-8 #{rev}`, rev))
    kde_commits(rev,commitmessage)
    commitlines.each do |line|
        tip, element = line.split(':')

        if element then element = element.tr(" ","") end
        if tip then tip = tip.tr(" ","") end

        # There is a bug fixed, a feature done, or a bug helped
        if tip == "BUG" || tip == "FEATURE" || tip == "CCBUG"
            numbers = element.split(",")
            numbers.each do |number|
                if number =~ /\d+/
                    if tip == "CCBUG" then
                        bugMessage = "@bug_id = " << number << "\n\n"
                        bugMessage << commitmessage
                        send_mail("bug-control@bugs.kde.org",rev,bugMessage)
                    else
                        closeMessage = "@bug_id = " << number << "\n"
                        closeMessage << "@bug_status = RESOLVED\n"
                        closeMessage << "@resolution = FIXED\n\n"
                        closeMessage << commitmessage
                        send_mail("bug-control@bugs.kde.org",rev,closeMessage)
                    end
                else
                    puts "#{number} is not a number, and it doesn't match a bug number"
                end
            end
        # There is ccmail
        elsif tip == "CCMAIL"

            mails = element.split(",")
            mails.each do |mail|
                if mail =~ /\w@\w/
                    send_mail("#{mail}",rev,commitmessage)
                else
                    puts "#{mail} is not a well formed eMail address"
                end
            end
        end
    end
end

analyze(COMMIT_ID)

exit 0
