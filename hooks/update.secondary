#!/bin/sh
#
# A hook script that sends commit notifications.
# Called by git-receive-pack with arguments: refname sha1-old sha1-new
#
# To enable this hook, make this file executable by "chmod +x update".
# copyright this dude http://blog.mwolson.org/tech/a_month_and_a_half_of_git.html

refname="$1"
oldrev="$2"
newrev="$3"

# Safety check
if [ -z "$GIT_DIR" ]; then
        echo "Don't run this script from the command line." >&2
        echo " (if you want, you could supply GIT_DIR then run" >&2
        echo "  $0 <ref> <oldrev> <newrev>)" >&2
        exit 1
fi

if [ -z "$refname" ] || [ -z "$oldrev" ] || [ -z "$newrev" ]; then
        echo "Usage: $0 <ref> <oldrev> <newrev>" >&2
        exit 1
fi

for f in $HOME/.gitolite.down $PWD/.gitolite.down
  do
    if [ -f $f ]
      then
        echo >&2
        echo '*** Sorry, the repositories are down for maintenance.' >&2
        echo '*** Please try again in a short while.' >&2
        echo >&2
        cat $f >&2
        exit 1
    fi
done

# Prepare the list of revisions to check, etc
revdiff="$newrev"
if [ $oldrev != "0000000000000000000000000000000000000000" ]; then
    revdiff="$(git merge-base $oldrev $newrev)..$newrev"
fi

revlist=$(git rev-parse --not --all | grep -v $oldrev | git rev-list --reverse --stdin $revdiff)

# Generate short unique ID for each repo that can be used for a shortened commit viewing URL
repouid=$(pwd | sha1sum | cut -c -8)
if [ ! -f kde-repo-uid ]; then
    $(echo $repouid > kde-repo-uid)
fi

# Setup essential variables
mgmtdir="/home/git/repo-management"
currpath=$(pwd)
currdir=$(basename $(pwd))
parentpath=$(cd ..; pwd)
parentdir=$(cd ..; basename $(pwd))
seconddir=$(cd ..; cd ..; basename $(pwd))
thirddir=$(cd ..; cd ..; cd ..; basename $(pwd))

if [ "$parentdir" == "repositories" ]; then
    repopath="$currdir"
else
    repopath="$parentdir/$currdir"
fi

# Audit the incoming commits
auditdir=$mgmtdir/repo-configs/audit/$repopath
if [ ! -f $auditdir/skip-audit ]; then
    echo "Auditing commits, please wait ..."
    for commit_id in $revlist ; do
        $mgmtdir/bin/audit-commit.pl ${commit_id}
        if [ $? -ne 0 ]; then
            exit 1
        fi
    done
fi

# Is this the first push?
headlist=$(ls $GIT_DIR/refs/heads)
if [ "$headlist" == "" ]; then
    echo "Skipping post-push hooks for the initial push to an empty repository."
    echo "(If this is not the initial push, please inform the sysadmin team.)"
    exit 0
fi

url=
if [ $parentdir == "sysadmin" -o $currdir == "gitolite-admin.git" ]; then
    #do nothing; sysadmin repos private, for now
    url=
elif [ $seconddir == "scratch" -o $thirddir == "clones" -o $parentpath == "/srv/kdegit/repositories" ]; then
    urlpath=${currpath#/srv/kdegit/repositories/}
    url="http://commits.kde.org/$repouid/$newrev"
fi

if [ ! -z $url ]; then
    revcount=$(echo $revlist | wc -w)
    if [ "$revcount" -eq "1" ]; then
        echo "In a few minutes this commit will be available for viewing at:"
    else
        echo "In a few minutes the last commit in the series will be available for viewing at:"
    fi
    echo "$url"
fi

# Send email
commitfilterdir=$mgmtdir/repo-configs/commitfilter/$repopath
if [ -f $commitfilterdir/filtername ] && [ -f $commitfilterdir/svnpath ]; then
    echo "Processing commit message keywords and sending emails ..."
    for commit_id in $revlist ; do
        $mgmtdir/bin/email-git ${commit_id} $(cat $commitfilterdir/filtername) $(cat $commitfilterdir/svnpath)
    done
fi

# Update CIA
ciadir=$mgmtdir/repo-configs/cia/$repopath
skipcia=0
if [ $parentdir == "sysadmin" -o $currdir == "gitolite-admin.git" -o $seconddir == "scratch" -o $thirddir == "clones" ]; then
    skipcia=1
fi

if [ "$skipcia" -eq "0" ]; then
    if [ ! -f $ciadir/skip-cia ]; then
        echo "Submitting CIA.vc update ..."
        for merged in $revlist ; do
            $mgmtdir/bin/ciabot_multi.sh ${refname} ${merged} $(echo "$currdir" | sed "s/\.git$//") "http://commits.kde.org/$repouid/"
        done
    fi
fi

# --- Finished
exit 0

