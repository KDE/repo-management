#!/usr/bin/python

# Load dependencies
import os
import sys
import subprocess
from hooklib import Repository, Commit, CommitNotifier, MessageBuilder, RepoType, ChangeType, RefType

def usage():
    print "Information needed to run could not be gathered successfully."
    print "Required environment variables: GIT_DIR, GL_USER, HOME"
    print "Syntax: update.secondary <refname> <oldsha> <newsha>"
    exit(1)

def maintenance():
    print "Sorry, but the repository you are trying to access is currently unavailable."
    print "This is to allow for maintenance, we apologise for any inconvience caused."
    print "If you believe this not to be the case, please contact sysadmin@kde.org."
    exit(1)
    
#####
# Initialisation
#####

# Read arguments...
try:
    ref_name = sys.argv[1]
    old_sha1 = sys.argv[2]
    new_sha1 = sys.argv[3]
except IndexError:
    usage()

# Read needed environment variables
git_dir = os.getenv('GIT_DIR')
push_user = os.getenv('GL_USER')
user_home = os.getenv('HOME')
    
# Check for maintenance mode...
if os.path.exists(user_home + "/.gitolite.down") or os.path.exists(git_dir + "/.gitolite.down"):
    maintenance()
    
# Initialise the repository
Repository.BaseDir = "/home/secure/repositories/"
repository = Repository( ref_name, old_sha1, new_sha1, push_user )

#####
# Auditing
#####

# Repository change checks...
push_size_restricted = [RepoType.Normal, RepoType.Website, RepoType.Sysadmin]
if repository.ref_type == RefType.Backup:
    print "Pushing to backup refs is not supported for security reasons"
    print "Push declined - attempted repository integrity violation"
    exit(1)
elif repository.ref_type == RefType.Upstream:
    print "Pushing to server maintained upstreams is not permitted"
    print "Push declined - attempted repository integrity violation"
    exit(1)
elif repository.ref_type == RefType.Unknown:
    print "Sorry, but the ref you are trying to push to could not be recognised."
    print "Only pushes to branches, tags and notes are permitted."
    exit(1)
elif repository.ref_name == "HEAD":
    print "Creating refs which conflict with internally used names is not permitted."
    print "Push declined - attempted repository integrity violation"
    exit(1)
if len(repository.commits) > 100 and not os.path.exists(git_dir + "/kde-hooks-off") and repository.repo_type in push_size_restricted:
    print "More than 100 commits are being pushed"
    print "Push declined - attempted infrastructure abuse"
    print "Please file a KDE Sysadmin bug to continue"
    exit(1)

#####
# Pre-acceptance
#####

# Do we need to back it up??
if repository.change_type == ChangeType.Forced or repository.change_type == ChangeType.Delete:
    repository.backup_ref()

#####
# Post acceptance
#####

# Are post commands supposed to be run?
if os.path.exists(git_dir + "/kde-hooks-off"):
    print "Hooks are currently disabled!"
    exit(0)

# Perform notifications
notifier = CommitNotifier()
for (commit, diff) in notifier.handler(repository):
    # Create the message builder in preperation to send notifications
    builder = MessageBuilder( repository, commit, None )

    # Determine the address to send this private email to - if we can't send it to Sysadmin so it can be fixed
    if repository.path in ["ev-board"]:
        notify_address = "kde-ev-board@kde.org"
    elif repository.path in ["sysadmin", "relicensing"]:
        notify_address = "sysadmin@kde.org"
    else:
        notify_address = "sysadmin@kde.org"

    notifier.notify_email( builder, notify_address, diff )

# Everything is done....
exit(0)
