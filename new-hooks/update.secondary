#!/usr/bin/python

# Load dependencies
import os
import sys
from hooklib import Repository, Commit, CommitAuditor, CiaNotifier, EmailNotifier, RepoType, ChangeType, RefType

def usage():
    print "Information needed to run could not be gathered successfully."
    print "Required environment variables: GIT_DIR, GL_USER, HOME"
    print "Syntax: update.secondary <refname> <oldsha> <newsha>"
    exit(1)

def maintenance():
    print "Sorry, but the repository you are trying to access is currently unavailable."
    print "This is to allow for maintenance, we apologise for any inconvience caused."
    print "If you believe this not to be the case, please contact sysadmin@kde.org."
    exit(1)
    
#####
# Initialisation
#####

# Read arguments...
try:
    ref_name = sys.argv[1]
    old_sha1 = sys.argv[2]
    new_sha1 = sys.argv[3]
except IndexError:
    usage()

# Read needed environment variables
git_dir = os.getenv('GIT_DIR')
push_user = os.getenv('GL_USER')
user_home = os.getenv('HOME')
    
# Check for maintenance mode...
if os.path.exists(user_home + "/.gitolite.down") or os.path.exists(git_dir + "/.gitolite.down"):
    maintenance()
    
# Initialise the repository
repository = Repository( ref_name, old_sha1, new_sha1, push_user )

#####
# Auditing
#####

# Repository change checks...
if repository.ref_type == RefType.Backup:
    print "Pushing to backup refs is not supported for security reasons"
    print "Push declined - attempted repository integrity violation"
    exit(1)
elif repository.ref_type == RefType.Unknown:
    print "Sorry, but the ref you are trying to push to could not be recognised."
    print "Only pushes to branches and tags are supported."
    exit(1)
elif repository.ref_name == "HEAD":
    print "Creating refs which conflict with internally used names is not permitted."
    print "Push declined - attempted repository integrity violation"
    exit(1)

# New commits...
auditor = CommitAuditor( repository )
skip_base = repository.management_directory + "/repo-configs/audit/"
if not os.path.exists(skip_base + repository.path + ".git/skip-eol"):
    auditor.audit_eol()

if not os.path.exists(skip_base + repository.path + ".git/skip-filename"):
    auditor.audit_filename()

if not os.path.exists(skip_base + repository.path + ".git/skip-author"):
    auditor.audit_metadata()

# Did we have any commit audit failures?
if not len(auditor.failures) == 0:
    for (sha1, failures) in auditor.failures.iteritems():
        print "Audit Failure - commit " + sha1
        print "   " + "\n   ".join(failures)
    exit(1)

#####
# Pre-acceptance
#####

# Do we need to back it up??
if repository.change_type == ChangeType.Forced or repository.change_type == ChangeType.Delete:
    repository.backup_ref()
    
# Repository specific special handling....
# KDE PIM: Add a note to all commits which are new to the Enterprise branch...
if (repository.path == "kdepim" or repository.path == "kdepim-runtime") and repository.ref_name == "enterprise":
    for commit in repository.commits:
        command = "git notes add --message 'PENDING' " + commit.sha1
        subprocess.Popen(command, shell=True)

#####
# Post acceptance
#####

# Does this user need a special post-update skip?
post_exceptions = ["scripty"]
if push_user in post_exceptions:
    exit(0)
    
# Output a helpful url....
if repository.repo_type != RepoType.Sysadmin:
    if len(repository.commits) == 1:
        print "In a few minutes this commit will be available for viewing at:"
    else:
        print "In a few minutes the last commit in the series will be available for viewing at:"
    
    print repository.commits[ repository.new_sha1 ].url()
    
# Notify CIA...
cia_allowed = [RepoType.Normal, RepoType.Website]
if repository.repo_type in cia_allowed:
    cia = CiaNotifier(repository)
    cia.notify()

# Send email based notifications (email, bugzilla, reviewboard)
email_allowed = [RepoType.Normal, RepoType.Website, RepoType.Sysadmin]
if repository.repo_type in email_allowed:
    email = EmailNotifier(repository)
    email.notify()

# Everything is done....
exit(0)
